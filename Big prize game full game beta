<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Big Prize Game Version 2.0</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            overflow: hidden; /* Prevent body scroll */
        }
        .container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 1rem;
            position: relative;
            overflow: hidden;
        }

        .flyer {
            position: absolute;
            width: 50px;
            height: 50px;
            background-color: #ffffff;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            font-weight: bold;
            color: #4a5568;
            transition: transform 3s, opacity 3s;
            pointer-events: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        /* Rainbow Strobing Effect for the final message */
        .rainbow-strobe {
            animation: rainbow-color 1.5s linear infinite;
        }
        
        /* Boss Battle Message Animation */
        .boss-battle-text {
            animation: blink 1s linear infinite;
        }
        @keyframes blink {
            50% { opacity: 0; }
        }

        /* Permanent Rainbow Strobing for the counter display */
        .permanent-rainbow {
            animation: rainbow-color 1.5s linear infinite;
            background: none;
            -webkit-background-clip: unset;
            -webkit-text-fill-color: unset;
        }

        @keyframes rainbow-color {
            0% { color: hsl(0, 100%, 50%); text-shadow: 0 0 5px hsl(0, 100%, 50%); }
            14% { color: hsl(51, 100%, 50%); text-shadow: 0 0 5px hsl(51, 100%, 50%); }
            28% { color: hsl(102, 100%, 50%); text-shadow: 0 0 5px hsl(102, 100%, 50%); }
            42% { color: hsl(153, 100%, 50%); text-shadow: 0 0 5px hsl(153, 100%, 50%); }
            57% { color: hsl(204, 100%, 50%); text-shadow: 0 0 5px hsl(204, 100%, 50%); }
            71% { color: hsl(255, 100%, 50%); text-shadow: 0 0 5px hsl(255, 100%, 50%); }
            85% { color: hsl(306, 100%, 50%); text-shadow: 0 0 5px hsl(306, 100%, 50%); }
            100% { color: hsl(360, 100%, 50%); text-shadow: 0 0 5px hsl(360, 100%, 50%); }
        }

        #pong-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }

        canvas {
            background-color: #000;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>

    <div class="container bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-100">
        <div id="counter-game" class="w-full max-w-lg p-6 md:p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl flex flex-col items-center space-y-6 md:space-y-8 z-10">
            <h1 class="text-3xl md:text-4xl font-bold text-center mb-4">Big Prize Game Version 2.0</h1>

            <!-- Count Display -->
            <div id="count-display" class="text-5xl md:text-7xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-teal-500 to-blue-500 transition-transform duration-300 ease-in-out">
                0
            </div>

            <!-- Progress Bar -->
            <div class="w-full h-4 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                <div id="progress-bar" class="h-full bg-gradient-to-r from-teal-500 to-blue-500 transition-all duration-300 ease-in-out" style="width: 0%;"></div>
            </div>

            <!-- Message Box -->
            <div id="message-box" class="w-full h-10 flex justify-center items-center text-center text-base md:text-lg font-bold opacity-0 transition-opacity duration-500"></div>

            <!-- Song Selection -->
            <div class="w-full">
                <label for="end-song-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Choose Your End Song:
                </label>
                <select id="end-song-select" class="w-full p-2 rounded-xl border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="jingle" selected>Victory Fanfare</option>
                    <option value="twinkle">Twinkle, Twinkle</option>
                    <option value="cMajorScale">C Major Scale</option>
                </select>
            </div>

            <!-- Control Buttons -->
            <div class="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 w-full">
                <button id="start-fast-btn" class="w-full md:w-1/3 p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700">
                    Easy
                </button>
                <button id="start-medium-btn" class="w-full md:w-1/3 p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700">
                    Medium
                </button>
                <button id="start-slow-btn" class="w-full md:w-1/3 p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700">
                    Hard
                </button>
            </div>
            <div class="w-full mt-4 md:mt-0 flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 justify-center">
                <button id="secret-mode-btn" class="w-full md:w-1/3 p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 hidden">
                    Secret Mode
                </button>
                <button id="reset-btn" class="w-full p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700">
                    Reset
                </button>
            </div>
        </div>
        
        <!-- Pong Game Container -->
        <div id="pong-game" class="hidden">
             <h2 class="text-3xl md:text-4xl font-bold text-center mb-4">Pong</h2>
            <div class="flex justify-center mb-2">
                <canvas id="pong-canvas"></canvas>
            </div>
            <div id="pong-info" class="text-white text-lg mt-2 flex justify-between w-full max-w-lg mx-auto px-4">
                <span id="pong-score">Score: 0</span>
                <span id="pong-round">Round: 1</span>
            </div>
            <button id="pong-reset-btn" class="w-full p-4 text-white font-bold rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 active:scale-95 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 hidden">
                    Back to Main Menu
                </button>
        </div>
    </div>

    <script>
        // DOM element references
        const counterGame = document.getElementById('counter-game');
        const pongGame = document.getElementById('pong-game');
        const pongResetBtn = document.getElementById('pong-reset-btn');
        const countDisplay = document.getElementById('count-display');
        const startFastBtn = document.getElementById('start-fast-btn');
        const startMediumBtn = document.getElementById('start-medium-btn');
        const startSlowBtn = document.getElementById('start-slow-btn');
        const resetBtn = document.getElementById('reset-btn');
        const progressBar = document.getElementById('progress-bar');
        const messageBox = document.getElementById('message-box');
        const container = document.querySelector('.container');
        const endSongSelect = document.getElementById('end-song-select');
        const secretModeBtn = document.getElementById('secret-mode-btn');

        // Game state variables
        let count = 0;
        let counterInterval;
        let isCounting = false;
        const target = 1000000;
        const incrementFast = 1000;
        const incrementMedium = 100;
        const incrementSlow = 1;
        const incrementSecret = 10000;

        // Unlock state
        let isSecretModeUnlocked = localStorage.getItem('secretModeUnlocked') === 'true';
        let isPermanentRainbowUnlocked = localStorage.getItem('permanentRainbowUnlocked') === 'true';

        // Tone.js Music Setup
        const easySynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.01, decay: 0.2, sustain: 0.3, release: 0.5,
            }
        }).toDestination();
        const easySequence = new Tone.Sequence((time, note) => {
            easySynth.triggerAttackRelease(note, "16n", time);
        }, ["C4", "E4", "G4", "B4", ["C5", "B4"], "A4", "G4", "E4"], "8n");

        const mediumSynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.02, decay: 0.2, sustain: 0.5, release: 0.8,
            }
        }).toDestination();
        const mediumSequence = new Tone.Sequence((time, note) => {
            mediumSynth.triggerAttackRelease(note, "8n", time);
        }, ["C4", "E4", "G4", "B4"], "8n");

        const hardSynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.2, decay: 0.5, sustain: 0.8, release: 1.0,
            }
        }).toDestination();
        const hardSequence = new Tone.Sequence((time, note) => {
            hardSynth.triggerAttackRelease(note, "4n", time);
        }, ["C4", "E4", "G4", "A4", "F4", "D4", "G4", "C4"], "4n");
        
        const secretSynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.01, decay: 0.1, sustain: 0.2, release: 0.4,
            }
        }).toDestination();
        const secretSequence = new Tone.Sequence((time, note) => {
            secretSynth.triggerAttackRelease(note, "32n", time);
        }, ["C5", "G5", "C5", "G5", "D5", "A5", "D5", "A5", "E5", "B5", "E5", "B5", "F5", "C6", "F5", "C6"], "16n");
        
        // Pong Theme Song
        const pongSynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.02, decay: 0.1, sustain: 0.3, release: 0.5,
            }
        }).toDestination();
        const pongSequence = new Tone.Sequence((time, note) => {
            pongSynth.triggerAttackRelease(note, "8n", time);
        }, ["C4", "G4", "A4", "G4", "F4", "E4", "D4", "C4"], "4n");
        
        // Boss Paddle Hit Sound
        const bossSynth = new Tone.Synth({
            oscillator: { type: "square" },
            envelope: {
                attack: 0.01, decay: 0.2, sustain: 0.1, release: 0.5
            }
        }).toDestination();

        const endSongs = {
            'jingle': [["C5", "E5", "G5", "C6", null, "G5", "E5", "C5"],["A4", "C5", "E5", "G5", null, "E5", "C5", "A4"],["F4", "A4", "C5", "F5", null, "C5", "A4", "F4"],["G4", "B4", "D5", "G5", null, "D5", "B4", "G4"],["C5", "E5", "G5", "C6"]],
            'twinkle': [["C4", "C4", "G4", "G4", "A4", "A4", "G4", null],["F4", "F4", "E4", "E4", "D4", "D4", "C4", null],["G4", "G4", "F4", "F4", "E4", "E4", "D4", null],["G4", "G4", "F4", "F4", "E4", "E4", "D4", null],["C4", "C4", "G4", "G4", "A4", "A4", "G4", null],["F4", "F4", "E4", "E4", "D4", "D4", "C4", null]],
            'cMajorScale': [["C4", "D4", "E4", "F4", "G4", "A4", "B4", "C5"]]
        };
        const endSongSynth = new Tone.PolySynth(Tone.Synth, {
            oscillator: { type: "square" },
            envelope: {
                attack: 0.05, decay: 0.2, sustain: 0.4, release: 0.8,
            }
        }).toDestination();
        let endSongSequence;

        // Pong game variables
        let canvas, ctx;
        let pongGameLoop;
        let ball = { x: 0, y: 0, dx: 5, dy: 5, radius: 10, color: '#fff' };
        let paddle = { x: 0, y: 0, width: 100, height: 10, color: '#fff' };
        let bossPaddle = { x: 0, y: 10, width: 150, height: 10, color: '#ff0000' };
        let score = 0;
        let round = 1;
        let gameOver = false;
        let isBossRound = false;
        let bossTextVisible = false;
        const initialBallSpeed = 5;

        // Function to update the display
        function updateDisplay() {
            countDisplay.textContent = new Intl.NumberFormat().format(count);
            const progress = (count / target) * 100;
            progressBar.style.width = `${Math.min(progress, 100)}%`;
        }

        // Function to create and animate the flyers
        function animateFlyers() {
            for (let i = 0; i < 20; i++) {
                const flyer = document.createElement('div');
                flyer.classList.add('flyer');
                flyer.textContent = '⏱️'; 
                const startX = Math.random() * window.innerWidth;
                const startY = Math.random() * window.innerHeight;
                const endY = -100;
                flyer.style.left = `${startX}px`;
                flyer.style.top = `${startY}px`;
                flyer.style.backgroundColor = `hsl(${Math.random() * 360}, 70%, 80%)`;
                container.appendChild(flyer);
                setTimeout(() => {
                    flyer.style.transform = `translateY(${endY - startY}px) translateX(${Math.random() * 200 - 100}px) rotate(${Math.random() * 720}deg) scale(0.5)`;
                    flyer.style.opacity = '0';
                }, 50);
                setTimeout(() => {
                    flyer.remove();
                }, 3000);
            }
        }

        // Function to play the end song based on selection
        function playEndSong(songKey) {
            Tone.Transport.stop();
            Tone.Transport.cancel();
            Tone.Transport.bpm.value = 120;
            const notes = endSongs[songKey].flat();
            endSongSequence = new Tone.Sequence((time, note) => {
                endSongSynth.triggerAttackRelease(note, "8n", time);
            }, notes, "8n");
            endSongSequence.start(0);
            Tone.Transport.start();
        }

        // Function to start the counting process
        function startCounting(increment, finalMessage) {
            // Fix: Call resetCounting to ensure a clean state before starting a new game
            resetCounting();

            if (Tone.context.state !== 'running') {
                Tone.start();
            }
            if (isCounting || count >= target) return;
            isCounting = true;
            messageBox.style.opacity = '0';
            messageBox.classList.remove('rainbow-strobe');
            
            startFastBtn.disabled = true;
            startMediumBtn.disabled = true;
            startSlowBtn.disabled = true;
            secretModeBtn.disabled = true;

            Tone.Transport.stop();
            Tone.Transport.cancel();

            if (increment === incrementFast) {
                Tone.Transport.bpm.value = 180;
                easySequence.start(0);
            } else if (increment === incrementMedium) {
                Tone.Transport.bpm.value = 120;
                mediumSequence.start(0);
            } else if (increment === incrementSlow) {
                Tone.Transport.bpm.value = 90;
                hardSequence.start(0);
            } else if (increment === incrementSecret) {
                Tone.Transport.bpm.value = 240;
                secretSequence.start(0);
            }
            Tone.Transport.start();

            counterInterval = setInterval(() => {
                if (count < target) {
                    count += increment;
                    if (count > target) {
                        count = target;
                    }
                    updateDisplay();
                } else {
                    clearInterval(counterInterval);
                    Tone.Transport.stop();
                    isCounting = false;
                    
                    let messageToShow = finalMessage;
                    if (increment === incrementSlow && !isSecretModeUnlocked) {
                        isSecretModeUnlocked = true;
                        localStorage.setItem('secretModeUnlocked', 'true');
                        updateSecretModeButton();
                        messageToShow = "You've proven your patience... for nothing. BUT, you've unlocked Secret Mode! Check it out!";
                    } 
                    
                    if (increment === incrementSecret && !isPermanentRainbowUnlocked) {
                        isPermanentRainbowUnlocked = true;
                        localStorage.setItem('permanentRainbowUnlocked', 'true');
                        updatePermanentRainbowEffect();
                        messageToShow = "You've mastered the game and unlocked a permanent bonus! Now play something else!";
                        // --- Transition to PONG ---
                        setTimeout(() => {
                           initializePongGame();
                        }, 2000);
                    }
                    
                    messageBox.textContent = messageToShow;
                    messageBox.classList.remove('text-green-600');
                    messageBox.classList.add('text-red-600');
                    messageBox.style.opacity = '1';
                    messageBox.classList.add('rainbow-strobe');
                    
                    startFastBtn.disabled = false;
                    startMediumBtn.disabled = false;
                    startSlowBtn.disabled = false;
                    secretModeBtn.disabled = false;

                    animateFlyers();
                    playEndSong(endSongSelect.value);
                }
            }, 10);
        }

        // --- PONG GAME LOGIC ---
        function initializePongGame() {
            counterGame.classList.add('hidden');
            pongGame.classList.remove('hidden');
            pongResetBtn.classList.remove('hidden');

            canvas = document.getElementById('pong-canvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size based on window
            canvas.width = Math.min(window.innerWidth * 0.9, 800);
            canvas.height = Math.min(window.innerHeight * 0.7, 600);

            // Reset game state
            score = 0;
            round = 1;
            gameOver = false;
            isBoss
